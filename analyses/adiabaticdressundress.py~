import itertools
import os
import numpy as np
import scipy
import scipy.integrate
import matplotlib.pyplot as plt
%matplotlib inline

from scipy.linalg import expm
from numpy import pi, cos, sin, exp, sqrt
dagger = lambda u : np.transpose(np.conjugate(u))

ket_r1 = np.asarray([[1], [0], [0], [0], [0], [0], [0], [0]], dtype=complex)
ket_1r = np.asarray([[0], [1], [0], [0], [0], [0], [0], [0]], dtype=complex)
ket_r0 = np.asarray([[0], [0], [1], [0], [0], [0], [0], [0]], dtype=complex)
ket_0r = np.asarray([[0], [0], [0], [1], [0], [0], [0], [0]], dtype=complex)
ket_11 = np.asarray([[0], [0], [0], [0], [1], [0], [0], [0]], dtype=complex)
ket_10 = np.asarray([[0], [0], [0], [0], [0], [1], [0], [0]], dtype=complex)
ket_01 = np.asarray([[0], [0], [0], [0], [0], [0], [1], [0]], dtype=complex)
ket_00 = np.asarray([[0], [0], [0], [0], [0], [0], [0], [1]], dtype=complex)

bra_00 = ket_00.conjugate().transpose()
bra_01 = ket_01.conjugate().transpose()
bra_0r = ket_0r.conjugate().transpose()
bra_10 = ket_10.conjugate().transpose()
bra_11 = ket_11.conjugate().transpose()
bra_1r = ket_1r.conjugate().transpose()
bra_r0 = ket_r0.conjugate().transpose()
bra_r1 = ket_r1.conjugate().transpose()

def phase (t):
    phi = 0
    return phi


def hamiltonian (t, adiabatic_dressing, DeltaMW, OmegaMW):
    pf = exp(-1j * phase(t))
    pfc = np.conjugate(pf)

    OmegaR, dOmegaR_dt = adiabatic_dressing.get_Omega(t)
    DeltaR, dDeltaR_dt = adiabatic_dressing.get_Delta(t)


    h = \
        - (DeltaR + 2*DeltaMW) * np.outer(ket_r1, bra_r1) \
        - (DeltaR + 2*DeltaMW) * np.outer(ket_1r, bra_1r) \
        - (DeltaR + DeltaMW) * np.outer(ket_r0, bra_r0) \
        - (DeltaR + DeltaMW) * np.outer(ket_0r, bra_0r) \
        - 2*DeltaMW * np.outer(ket_11, bra_11) \
        - DeltaMW * np.outer(ket_10, bra_10) \
        - DeltaMW * np.outer(ket_01, bra_01) \
        + OmegaR/2 * (np.outer(ket_r1, bra_11) + np.outer(ket_11, bra_r1)) \
        + OmegaR/2 * (np.outer(ket_1r, bra_11) + np.outer(ket_11, bra_1r)) \
        + OmegaR/2 * (np.outer(ket_r0, bra_10) + np.outer(ket_10, bra_r0)) \
        + OmegaR/2 * (np.outer(ket_0r, bra_01) + np.outer(ket_01, bra_0r)) \
        + OmegaMW/2 * (pf * np.outer(ket_11, bra_10) + pfc * np.outer(ket_10, bra_11)) \
        + OmegaMW/2 * (pf * np.outer(ket_11, bra_01) + pfc * np.outer(ket_01, bra_11)) \
        + OmegaMW/2 * (pf * np.outer(ket_10, bra_00) + pfc * np.outer(ket_00, bra_10)) \
        + OmegaMW/2 * (pf * np.outer(ket_01, bra_00) + pfc * np.outer(ket_00, bra_01))

    return h


class RydbergAdiabaticDressUndress:
    """
    Represent an adiabatic sweep of Rabi frequency and detuning
    for a two level atom

    Parameters
    ----------
    Omega_min: Minimum Rabi frequency

    Omega_max: Maximum Rabi frequency

    Delta_min: Minimum detuning

    Delta_max: Maximum detuning

    t_gaussian_width: Width (variance like quantity) of the Gaussian sweep

    t_constant_duration: Dureaction for which the laser's parameters are constant

    t_mid: Mid point of the adiabatic evolution

    t_dress_begin: Time of beginning the dressing sweep

    t_dress_end: Time of ending the dressing sweep

    t_undress_begin: Time of beginning the undressing sweep

    t_undress_begin: time of ending the undressing sweep
    """
    def __init__ (self, Omega_min, Omega_max, Delta_min, Delta_max, \
                 t_gaussian_width, t_constant_duration, t_mid):
        self.Omega_min = Omega_min
        self.Omega_max = Omega_max
        self.Delta_min = Delta_min
        self.Delta_max = Delta_max

        self.t_gaussian_width = t_gaussian_width
        self.t_constant_duration = t_constant_duration

        self.t_gaussian_duration = 4*t_gaussian_width

        self.t_dress_begin = t_mid - self.t_gaussian_duration - t_constant_duration/2
        self.t_dress_end = t_mid - t_constant_duration/2
        self.t_undress_begin = t_mid + t_constant_duration/2
        self.t_undress_end = t_mid + self.t_gaussian_duration + t_constant_duration/2

    def get_Omega (self, t):
        """
        Computes the Rabi frequency at time t

        Parameters
        ----------
        t_width: width of the Gaussian

        t: time

        Returns
        ------
        Omega: Rabi frequency

        dOmega_dt: Derivative of the Rabi frequency with respect
            to time
        """

        if t < self.t_dress_begin or t > self.t_undress_end:
            Omega = self.Omega_min
            dOmega_dt = 0

        elif t < self.t_dress_end:
            t_zeroed = t - self.t_dress_end
            gaussian_factor = exp(-t_zeroed **2 / 2/self.t_gaussian_width**2)

            Omega = self.Omega_min \
            + (self.Omega_max - self.Omega_min) * gaussian_factor

            dOmega_dt = - (self.Omega_max - self.Omega_min) * t_zeroed / (self.t_gaussian_width)**2 \
               * gaussian_factor

        elif t > self.t_undress_begin:
            t_zeroed = t - self.t_undress_begin

            gaussian_factor = exp(-t_zeroed**2 / 2/self.t_gaussian_width**2)

            Omega = self.Omega_min \
            + (self.Omega_max - self.Omega_min) * gaussian_factor

            dOmega_dt = - (self.Omega_max - self.Omega_min) * t_zeroed / (self.t_gaussian_width)**2 \
               * gaussian_factor

        else:
            Omega = self.Omega_max
            dOmega_dt = 0

        return Omega, dOmega_dt

    def get_Delta (self, t):
        """
        Computes the detuning at time t

        Parameters
        ----------
        t: time

        Returns
        -------
        Delta: Detuning

        dDelta_dt: Derivative of the detuning with respect
            to time
        """

        if t < self.t_dress_begin or t > self.t_undress_end:
            Delta = self.Delta_max
            dDelta_dt = 0

        elif t < self.t_dress_end:
            t_zeroed = t - self.t_dress_begin
            Delta = self.Delta_max \
                + (self.Delta_min - self.Delta_max) / (self.t_dress_end - self.t_dress_begin) * t_zeroed
            dDelta_dt = (self.Delta_min - self.Delta_max) / (self.t_dress_end - self.t_dress_begin)

        elif t > self.t_undress_begin:
            t_zeroed = t - self.t_undress_begin
            Delta = self.Delta_min \
                + (self.Delta_max - self.Delta_min) / (self.t_undress_end - self.t_undress_begin) * t_zeroed
            dDelta_dt = (self.Delta_max - self.Delta_min) / (self.t_undress_end - self.t_undress_begin)
        else:
            Delta = self.Delta_min
            dDelta_dt = 0

        return Delta, dDelta_dt

def hamiltonian_derivative (t, adiabatic_dressing, DeltaMW, OmegaMW):
    OmegaR, dOmegaR_dtwidth = adiabatic_dressing.get_Omega(t)

    dH_dOmega \
        = 1/2 * (np.outer(ket_r1, bra_11) + np.outer(ket_11, bra_r1)) \
        + 1/2 * (np.outer(ket_1r, bra_11) + np.outer(ket_11, bra_1r)) \
        + 1/2 * (np.outer(ket_r0, bra_10) + np.outer(ket_10, bra_r0)) \
        + 1/2 * (np.outer(ket_0r, bra_01) + np.outer(ket_01, bra_0r)) \

    dH_dOmega *= dOmegaR_dtwidth
    return dH_dOmega
